bits numbering starts from 0 from lsb that is lsb is bit 0 

to extract kth bit :
   ( 1 << k) or 2 ki power k


 to check kth bits is set or not:
    ( x & (1 << k) )
   

to set kth bit :
   ( x | (1 << k))


to unset kth bit :
( x & ~(1 << k))


to toggle kth bit:
   (x ^ (1 << k))   


to check even , odd using bits :   note: even number ki lsb 0 hoti h ,odd number ki lsb 1 hoti h
  using lsb 
  if (x & 1 == 1)            if(x & 1 == 0)
  {                             even
    odd
  }
  

to check power of 2
  if(x & (x - 1) == 0)           if( x &  ( x - 1) > 0 )      note : 2 ki power ke phle waale ki saari bits 1 hoti h 
  {                                      not power of 2               2 ke power wale number ki only 1 bit set hoti h jo ki kth hogi
    power of 2
  }

  this doesn't work for x = 0

  so to handle all cases
   
   bool power_of_2(int x)
   {
     if( x && !(x & (x - 1)))
     {
        power of 2
     }
   }


to multiply or divide by 2 ki power k:
 for multiplication :   (x << k) left shift
 for division :   (x >> k)  right shift


to find out x % 2 ki power k:
   x & ((1 << k) - 1)


to count no of set bits in number x:
  use  __builtin_popcount(x)   for integer       TC = O(1)
       __builtin_popcountll(x)  for long long integer



   

